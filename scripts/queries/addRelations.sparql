PREFIX aat: <http://vocab.getty.edu/aat/>
PREFIX jila: <https://jila.zb.uzh.ch/ontology/>
PREFIX sari: <https://platform.jila.zb.uzh.ch/>
PREFIX search: <https://platform.jila.zb.uzh.ch/search/>
PREFIX crmdig: <http://www.ics.forth.gr/isl/CRMdig/>
PREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>
PREFIX gndo: <https://d-nb.info/standards/elementset/gnd#>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX frbroo: <http://iflastandards.info/ns/fr/frbr/frbroo/>
PREFIX rds: <http://schema.swissartresearch.net/ontology/rds#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX gn: <http://www.geonames.org/ontology#>
PREFIX schema: <http://schema.org/>
PREFIX rso: <http://www.researchspace.org/ontology/>

# Clear graph
DROP GRAPH sari:relations;

# Add basic ontology for Search relations
INSERT DATA {
  GRAPH sari:relations {
    search:Entity a rdfs:Class ;
      rdfs:equivalentClass crm:E1_CRM_Entity ;
      rdfs:label 'Entity'@en, 'Entität'@de, 'Entité'@fr, 'Entità'@it .
    search:Collection rdfs:label 'Documents'@en, 'Dokumente'@de, 'Documents'@fr, 'Documenti'@it ;
      a rdfs:Class ;
      rdfs:subClassOf search:Entity ;
      rdfs:equivalentClass crm:E78_Curated_Holding .
    search:Object rdfs:label 'Object'@en, 'Objekt'@de, 'Objet'@fr, 'Oggetto'@it ;
      a rdfs:Class ;
      rdfs:subClassOf search:Entity ;
      rdfs:equivalentClass crm:E22_Human-Made_Object .
    search:Person rdfs:label 'Person'@en, 'Person'@de, 'Personne'@fr, 'Persona'@it ;
      a rdfs:Class ;
      rdfs:subClassOf search:Entity ;
      rdfs:equivalentClass crm:E21_Person, rds:Person .
    search:Actor rdfs:label 'Actor/Legal Entity'@en, 'Organisation'@de, 'Entité juridique'@fr, 'Entità giuridica'@it ;
      a rdfs:Class ;
      rdfs:subClassOf search:Entity ;
      rdfs:equivalentClass crm:E39_Actor  .
    search:Place rdfs:label 'Place'@en, 'Ort'@de, 'Lieu'@fr, 'Luogo'@it  ;
      a rdfs:Class ;
      rdfs:subClassOf search:Entity ;
      rdfs:equivalentClass crm:E53_Place, rds:Place  .
    search:Type rdfs:label 'Type'@en, 'Typ'@de, 'Type'@fr, 'Tipo'@it ;
      a rdfs:Class ;
      rdfs:subClassOf search:Entity ;
      rdfs:equivalentClass crm:E55_Type, rds:Type .
    search:Event rdfs:label 'Event'@en, 'Ereignis'@de, 'Événement'@fr, 'Evento'@it ;
      a rdfs:Class ;
      rdfs:subClassOf search:Entity ;
      rdfs:equivalentClass crm:E5_Event, rds:Event .
    search:BibliographicItem rdfs:label 'Bibliographic Item'@en, 'Bibliographischer Eintrag'@de, 'Entrée bibliographique'@fr, 'Voce bibliografica'@it ;
      a rdfs:Class ;
      rdfs:subClassOf search:Entity ;
      rdfs:equivalentClass frbroo:F24_Publication_Expression, rds:BibliographicItem .
  }
};

# Add Search entity types to respective resources
INSERT {
  GRAPH sari:relations {
      ?subject a ?searchType .
  }
} WHERE {
  ?subject a ?crmType .
  VALUES(?crmType ?searchType) {
    (crm:E21_Person search:Person)
    (crm:E39_Actor search:Actor)
    (crm:E74_Group search:Group)
    (crm:E55_Type search:Type)
    (crm:E53_Place search:Place)
    (crm:E78_Curated_Holding search:Collection)
    (crm:E22_Human-Made_Object search:Object)
    (crm:E5_Event search:Event)
  }
  FILTER(REGEX(STR(?subject), 'jila.zb.uzh.ch'))
};

# Add CIDOC-CRM types for external entities
INSERT {
  GRAPH sari:relations {
    ?subject a crm:E21_Person .
  }
} WHERE {
  ?subject a gndo:Person .
};

INSERT {
  GRAPH sari:relations {
    ?subject a crm:E39_Actor .
  }
} WHERE {
  ?subject a gndo:CorporateBody .
};

INSERT {
  GRAPH sari:relations {
    ?subject a crm:E53_Place
  }
} WHERE {
  ?subject a gndo:PlaceOrGeographicName .
};

INSERT {
  GRAPH sari:relations {
    ?subject a crm:E22_Human-Made_Object
  }
} WHERE {
  ?subject a gndo:Work .
};

INSERT {
  GRAPH sari:relations {
    ?subject a crm:E5_Event .
  }
} WHERE {
  ?subject a gndo:ConferenceOrEvent .
};

INSERT {
  GRAPH sari:relations {
    ?subject a crm:E53_Place .
  }
} WHERE {
  ?person a gndo:Person ;
    ?placeRelation ?subject .
  VALUES (?placeRelation) {
    (gndo:placeOfActivity)
    (gndo:placeOfBirth)
    (gndo:placeOfDeath)
    (gndo:geographicAreaCode)
  }
};

INSERT {
  GRAPH sari:relations {
    ?subject a crm:E21_Person .
  }
} WHERE {
  ?person a gndo:Person ;
    ?personRelation ?subject .
  VALUES (?personRelation) {
    (gndo:familialRelationship)
  }
};

INSERT {
  GRAPH sari:relations {
    ?subject a ?type .
  }
} WHERE {
  VALUES (?relation ?label) {
    (owl:sameAs 'same as')
    (<https://resource.jila.zb.uzh.ch/type/085975D7-0220-384F-9CEB-83D17242E980> 'possible match')
  }
  ?entity ?relation ?subject ;
    a ?type .
};

# Add CIDOC-CRM types for entities that lack a specific type,
# but where the type can be inferred from relations.
# This can originate from entities created through parsing of
# internal remarks, such as relationships between observed
# entities and other entities that lack a GND.
INSERT {
  GRAPH sari:relations {
    ?subject a ?type .
  }
} WHERE {
  ?subject a crm:E1_CRM_Entity .
  ?subject ?relation ?object .
  VALUES (?relation ?label ?type) {
    (aat:300025529 'teacher' crm:E21_Person)
    (aat:300025931 'father' crm:E21_Person)
    (aat:300025932 'mother' crm:E21_Person)
    (aat:300154341 'husband' crm:E21_Person)
    (aat:300154343 'wife' crm:E21_Person)
    (aat:300154348 'daughter' crm:E21_Person)
    (aat:300188723 'brother' crm:E21_Person)
    (aat:300255718 'ancestor' crm:E21_Person)
    (aat:300266305 'descendant' crm:E21_Person)
    (aat:300386749 'grand-daughter' crm:E21_Person)
    (aat:300386751 'grand-parents' crm:E21_Person)
    (jila:teacher_of 'teacher of' crm:E21_Person)
    (jila:father_of 'father of' crm:E21_Person)
    (jila:mother_of 'mother of' crm:E21_Person)
    (jila:husband_of 'husband of' crm:E21_Person)
    (jila:wife_of 'wife of' crm:E21_Person)
    (jila:daughter_of 'daughter of' crm:E21_Person)
    (jila:brother_of 'brother of' crm:E21_Person)
    (jila:ancestor_of 'ancestor of' crm:E21_Person)
    (jila:descendant_of 'descendant of' crm:E21_Person)
    (jila:grand-daughter_of 'grand-daughter of' crm:E21_Person)
    (jila:grand-parents_of 'grand-parents of' crm:E21_Person)
  }
};

# Add GND types for entities for which we did not retrieve additoinal data
INSERT {
  GRAPH sari:relations {
    ?person a gndo:Person .
  }
} WHERE {
  ?person a crm:E21_Person .
  FILTER(STRSTARTS(STR(?person), 'https://d-nb.info/gnd/'))
  FILTER NOT EXISTS {
    ?person a gndo:Person .
  }
};

# Try to convert dates from external entities to xsd:date
# TODO: does not work yet
INSERT {
  GRAPH sari:relations {
    ?subject crm:P98i_was_born ?birth .
    ?birth a crm:E67_Birth ;
      crm:P4_has_time-span ?birthTimeSpan .
    ?birthTimeSpan a crm:E52_Time-Span ;
      crm:P82a_begin_of_the_begin ?earliestDate ;
      crm:P82b_end_of_the_end ?latestDate .
  }
} WHERE {
  ?subject crmdig:L54_is_same-as/gndo:dateOfBirth ?date .
  FILTER NOT EXISTS {
    ?subject crm:P98i_was_born/crm:P4_has_time_span ?birthTimeSpanOriginal .
  }
  BIND(REPLACE(?date, '[1234567890-]', '') as ?dateCheck)
  FILTER(?dateCheck = '')
  BIND(IF(STRLEN(?date) = 10, STRDT(?date, xsd:date), (IF(STRLEN(?date) = 4, STRDT(CONCAT(?date, '-01-01'), xsd:date), (IF(STRSTARTS(?date, '-') && STRLEN(?date) = 5, STRDT(CONCAT(?date, '-01-01'), xsd:date), ?date))))) as ?earliestDate)
  BIND(IF(STRLEN(?date) = 10, STRDT(?date, xsd:date), (IF(STRLEN(?date) = 4, STRDT(CONCAT(?date, '-12-31'), xsd:date), (IF(STRSTARTS(?date, '-') && STRLEN(?date) = 5, STRDT(CONCAT(?date, '-12-31'), xsd:date), ?date))))) as ?latestDate)
  BIND(URI(CONCAT(STR(?subject), '/birth')) as ?birth)
  BIND(URI(CONCAT(STR(?subject), '/birth/date')) as ?birthTimeSpan)
};

INSERT {
  GRAPH sari:relations {
    ?subject crm:P100i_died_in ?death .
    ?birth a crm:E69_Death ;
      crm:P4_has_time-span ?deathTimeSpan .
    ?birthTimeSpan a crm:E52_Time-Span ;
      crm:P82a_begin_of_the_begin ?earliestDate ;
      crm:P82b_end_of_the_end ?latestDate .
  }
} WHERE {
  ?subject crmdig:L54_is_same-as/gndo:dateOfDeath ?date .
  FILTER NOT EXISTS {
    ?subject crm:P100i_died_in/crm:P4_has_time_span ?deathTimeSpanOriginal .
  }
  BIND(REPLACE(?date, '[1234567890-]', '') as ?dateCheck)
  FILTER(?dateCheck = '')
  BIND(IF(STRLEN(?date) = 10, STRDT(?date, xsd:date), (IF(STRLEN(?date) = 4, STRDT(CONCAT(?date, '-01-01'), xsd:date), (IF(STRSTARTS(?date, '-') && STRLEN(?date) = 5, STRDT(CONCAT(?date, '-01-01'), xsd:date), ?date))))) as ?earliestDate)
  BIND(IF(STRLEN(?date) = 10, STRDT(?date, xsd:date), (IF(STRLEN(?date) = 4, STRDT(CONCAT(?date, '-12-31'), xsd:date), (IF(STRSTARTS(?date, '-') && STRLEN(?date) = 5, STRDT(CONCAT(?date, '-12-31'), xsd:date), ?date))))) as ?latestDate)
  BIND(URI(CONCAT(STR(?subject), '/death')) as ?death)
  BIND(URI(CONCAT(STR(?subject), '/death/date')) as ?deathTimeSpan)
};

# In the mapping we sometimes map to E1_CRM_Entity where the
# mapping is the same for several types and the type is more
# specifically defined elsewhere. Here we remove the E1_CRM_Entity
# type in instances where there is a more specific CRM type.
DELETE {
  ?subject a crm:E1_CRM_Entity .
} WHERE {
  ?subject a crm:E1_CRM_Entity ;
    a ?type .
  ?type rdfs:subClassOf* crm:E1_CRM_Entity .
  FILTER(?type != crm:E1_CRM_Entity)
};

# Where a more specific type is defined in addition to E39 Actor
# we remove E39 Actor to avoid having conflicts in types
DELETE {
  ?subject a crm:E39_Actor .
  ?subject a search:Actor .
} WHERE {
  ?subject a/rdfs:subClassOf crm:E39_Actor .
};

# Correct labels
DELETE {
  GRAPH ?g {
    ?s rdfs:label ?label .
  }
} INSERT {
  GRAPH ?g {
    ?s rdfs:label ?label_corrected .
  }
} WHERE {
  GRAPH ?g {
    ?s rdfs:label ?label .
  }
  FILTER(CONTAINS(?label, 'Morde?ay'))
  BIND(REPLACE(?label,'Morde.ay', 'Mordeḵay') as ?label_corrected)
};

INSERT DATA {
  GRAPH sari:relations {
    crm:E78_Curated_Holding rso:displayLabel 'Documents'@en, 'Dokumente'@de, 'Documents'@fr, 'Documenti'@it .
    crm:E22_Human-Made_Object rso:displayLabel 'Object'@en, 'Objekt'@de, 'Objet'@fr, 'Oggetto'@it .
    crm:E39_Actor rso:displayLabel 'Actor/Legal Entity'@en, 'Organisation'@de, 'Entité juridique'@fr, 'Entità giuridica'@it .
    crm:E74_Group rso:displayLabel 'Group'@en, 'Personengruppe'@de, 'Groupe'@fr, 'Gruppo'@it .
  }
};

# Add additional thumbnails
INSERT {
  GRAPH sari:relations {
    ?subject <http://schema.org/thumbnail> ?thumbnail .
  }
} WHERE {
  VALUES (?subject ?label ?thumbnail) {
    ( <https://resource.jila.zb.uzh.ch/actor/06B281E1-D405-3017-9AF0-9D5B2F0993A1> 'Schöne Bürgerin' <https://www.e-manuscripta.ch/zuzcmi/i3f/v20/3602949/800,500,1200,1600/400,/0/default.jpg>)
  }
};

# Add gender unknown where no gender is defined
INSERT {
  GRAPH sari:relations {
    ?subject gndo:gender <https://d-nb.info/standards/vocab/gnd/gender#notKnown> 
  }
} WHERE {
  ?subject a ?type .
  VALUES (?type) {
    (search:Person)
    (search:Group)
  }
  FILTER NOT EXISTS {
    ?subject crmdig:L54_is_same-as?/gndo:gender ?gender .
  }
  FILTER(STRSTARTS(STR(?subject), 'https://resource.jila.zb.uzh.ch'))
}